name: Build_Check
# check if OH6022 builds on some recent operating systems
# deploy Ubuntu / macOS / Windows binaries

on: [push]


env:
  # CMake build type (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  # MSVC specific, needed by packaging etc.
  VCINSTALLDIR: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC"



jobs:
  build_check:
    strategy:
      # do not stop on 1st fail
      fail-fast: false
      matrix:
#        os: [ubuntu-20.04, macos-12, windows-2019]
        os: [macos-12]

    runs-on: ${{ matrix.os }}


    steps:


    # --- Clone the latest commit ---

    - name: Checkout
      uses: actions/checkout@v2


    # --- Linux (Ubuntu) steps ---

    - name: Install Ubuntu Build Requirements
      if: startsWith(matrix.os, 'ubuntu')
      run:
        git submodule update --init --recursive;
        mkdir build;
        sudo apt update;
        sudo apt -y upgrade;
        sudo apt install g++ make cmake fakeroot rpm qttools5-dev libfftw3-dev binutils-dev libusb-1.0-0-dev libqt5opengl5-dev mesa-common-dev libgl1-mesa-dev libgles2-mesa-dev;
        cd build;
        cp ../CHANGELOG changelog;
        cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE


    - name: Ubuntu Build
      # GitHub hosts Linux runners on Standard_DS2_v2 virtual machines in Microsoft Azure:
      # 2-core CPU, 7 GB of RAM memory, 14 GB of SSD disk space
      working-directory: ${{github.workspace}}/build
      if: startsWith(matrix.os, 'ubuntu')
      run:
        make -j8;
        fakeroot make -j8 package;
        ls -l packages


    - name: Upload Ubuntu Artifacts
      # *.deb *.rpm *.tgz
      if: startsWith(matrix.os, 'ubuntu')
      uses: actions/upload-artifact@v2
      with:
        name: openhantek_linux_amd64_${{github.run_number}}
        path: ${{github.workspace}}/build/packages/*


    # --- macOS steps ---

    - name: Install macOS Build Requirements
      if: startsWith(matrix.os, 'macos')
      run:
        git submodule update --init --recursive;
        mkdir build;
        arch -arm64 brew update;
        arch -arm64 brew install qt5 fftw binutils create-dmg;
        export Qt5_DIR=$(arch -arm64 brew --prefix qt5);
        cd build;
        cp ../CHANGELOG changelog;
        arch -arm64 cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_PREFIX_PATH=${Qt5_DIR}


    - name: macOS Build
      # GitHub hosts macOS runners in GitHub's own macOS Cloud:
      # 3-core CPU, 14 GB of RAM memory, 14 GB of SSD disk space
      working-directory: ${{github.workspace}}/build
      if: startsWith(matrix.os, 'macos')
      run:
        arch -arm64 make -j12;
        sudo arch -arm64 make -j12 package;
        if test -d openhantek/OpenHantek.app; then
        export Qt5_DIR=$(brew --prefix qt5);
        export PATH=${Qt5_DIR}/bin:${PATH};
        cd openhantek ; 
        arch -arm64 macdeployqt OpenHantek.app -always-overwrite -verbose=1;
        cp /usr/local/opt/gcc/lib/gcc/11/libgcc_s.1.1.dylib OpenHantek.app/Contents/Frameworks/;
        python ../../utils/macdeployqtfix/macdeployqtfix.py
        --quiet OpenHantek.app/Contents/MacOS/OpenHantek ${Qt5_DIR};
        create-dmg --volname OpenHantek --volicon ../../openhantek/res/images/openhantek.icns
        --window-pos 200 120 --window-size 800 400 --icon-size 100 --icon "OpenHantek.app" 200 190
        --skip-jenkins --hide-extension "OpenHantek.app" --app-drop-link 600 185
        --eula ../../LICENSE OpenHantek.dmg OpenHantek.app;
        cd ..;
        else true;
        fi;
        if test -d openhantek/OpenHantek.app; then
        cd openhantek ; sudo tar -czf ../packages/openhantek_*_osx_*.tar.gz OpenHantek.app;
        if test -f OpenHantek.dmg; then
        sudo mv OpenHantek.dmg ../packages/$(basename ../packages/openhantek_*_osx_*.tar.gz .tar.gz).dmg;
        fi;
        cd ..;
        ls -l packages;
        else true;
        fi


    - name: Upload macOS Artifacts
      if: startsWith(matrix.os, 'macos')
      uses: actions/upload-artifact@v2
      with:
        name: openhantek_osx_x86_64_${{github.run_number}}
        path: ${{github.workspace}}/build/packages/*


    # --- Windows steps ---

    - name: Install Qt for Windows
      if: startsWith(matrix.os, 'windows')
      uses: jurplel/install-qt-action@v2


    - name: Setup Windows Build
      if: startsWith(matrix.os, 'windows')
      run:
        md build &
        call "%VCINSTALLDIR%/Auxiliary/Build/vcvars64.bat" &
        cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_PREFIX_PATH=%Qt5_DIR% -DCMAKE_BUILD_TYPE=Release -Bbuild


    - name: Windows Build
      # GitHub hosts Windows runners on Standard_DS2_v2 virtual machines in Microsoft Azure:
      # 2-core CPU, 7 GB of RAM memory, 14 GB of SSD disk space
      working-directory: ${{github.workspace}}/build
      if: startsWith(matrix.os, 'windows')
      shell: bash
      run:
        cmake --build . --parallel 8 --config Release --target package;
        ZIP=$(basename packages/openhantek_*_win_x64.zip);
        rm -f packages/openhantek_*_win_x64.*;
        cd openhantek/Release;
        7z a ../../packages/$ZIP *;
        cd ../..;
        ls -l packages;


    - name: Upload Windows Artifacts
      if: startsWith(matrix.os, 'windows')
      uses: actions/upload-artifact@v2
      with:
        name: openhantek_win_x64_${{github.run_number}}
        path: ${{github.workspace}}/build/packages/*.zip


    # --- Tagged Commit -> Upload Release ---

    - name: Upload Linux / Windows Release Assets
      if: |
        startsWith(github.ref, 'refs/tags/') &&
        ( startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'windows') )
      uses: softprops/action-gh-release@v1
      with:
        prerelease: true
        files: ${{github.workspace}}/build/packages/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

